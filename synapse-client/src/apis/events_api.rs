/*
 * Axon Synapse API
 *
 * API for Axon Synapse http services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`publish_event`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublishEventError {
    Status400(crate::models::Error),
    Status404(crate::models::Error),
    Status409(crate::models::Error),
    Status500(crate::models::Error),
    Status504(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`publish_event_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublishEventMessageError {
    Status400(crate::models::Error),
    Status404(crate::models::Error),
    Status409(crate::models::Error),
    Status500(crate::models::Error),
    Status504(crate::models::Error),
    UnknownValue(serde_json::Value),
}


pub async fn publish_event(configuration: &configuration::Configuration, context: &str, event_name: &str, axon_iq_payload_revision: Option<&str>, axon_iq_aggregate_id: Option<&str>, axon_iq_aggregate_type: Option<&str>, axon_iq_sequence_number: Option<i64>, axon_iq_date_time: Option<String>, body: Option<std::path::PathBuf>) -> Result<(), Error<PublishEventError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/contexts/{context}/events/{eventName}", local_var_configuration.base_path, context=crate::apis::urlencode(context), eventName=crate::apis::urlencode(event_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = axon_iq_payload_revision {
        local_var_req_builder = local_var_req_builder.header("AxonIQ-PayloadRevision", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = axon_iq_aggregate_id {
        local_var_req_builder = local_var_req_builder.header("AxonIQ-AggregateId", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = axon_iq_aggregate_type {
        local_var_req_builder = local_var_req_builder.header("AxonIQ-AggregateType", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = axon_iq_sequence_number {
        local_var_req_builder = local_var_req_builder.header("AxonIQ-SequenceNumber", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = axon_iq_date_time {
        local_var_req_builder = local_var_req_builder.header("AxonIQ-DateTime", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PublishEventError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn publish_event_message(configuration: &configuration::Configuration, context: &str, publishable_event_message: Option<crate::models::PublishableEventMessage>) -> Result<(), Error<PublishEventMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/contexts/{context}/events", local_var_configuration.base_path, context=crate::apis::urlencode(context));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&publishable_event_message);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PublishEventMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}


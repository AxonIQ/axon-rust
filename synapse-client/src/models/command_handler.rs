/*
 * Axon Synapse API
 *
 * API for Axon Synapse http services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CommandHandler : Command handler



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommandHandler {
    /// Unique command handler identifier
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "names")]
    pub names: Vec<String>,
    /// Message-handling client application endpoint
    #[serde(rename = "endpoint")]
    pub endpoint: String,
    /// Type of client application endpoint - `http-raw` endpoint type is served with single raw command payload - `http-message` endpoint type is served with single command message 
    #[serde(rename = "endpointType", skip_serializing_if = "Option::is_none")]
    pub endpoint_type: Option<String>,
    #[serde(rename = "endpointOptions", skip_serializing_if = "Option::is_none")]
    pub endpoint_options: Option<Vec<crate::models::EndpointOption>>,
    /// Unique client application identifier
    #[serde(rename = "clientId", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Client application name
    #[serde(rename = "componentName", skip_serializing_if = "Option::is_none")]
    pub component_name: Option<String>,
    /// The amount of load an Axon application would carry compared to other instances.  For example, if you have a two command handlers set up, each with a load factor of 100,  they will both carry an equal amount of load 
    #[serde(rename = "loadFactor", skip_serializing_if = "Option::is_none")]
    pub load_factor: Option<i32>,
    /// The number of concurrent commands that the command handler can handle.
    #[serde(rename = "concurrency", skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// Is this command handler enabled?
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Context name
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Id of the stored authentication used by synapse to call the registered handler
    #[serde(rename = "clientAuthenticationId", skip_serializing_if = "Option::is_none")]
    pub client_authentication_id: Option<String>,
    /// Id of the stored authentication used by synapse to contact axon server for this registration
    #[serde(rename = "serverAuthenticationId", skip_serializing_if = "Option::is_none")]
    pub server_authentication_id: Option<String>,
    /// The last error occuring with this handler
    #[serde(rename = "lastError", skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
}

impl CommandHandler {
    /// Command handler
    pub fn new(id: String, names: Vec<String>, endpoint: String) -> CommandHandler {
        CommandHandler {
            id,
            names,
            endpoint,
            endpoint_type: None,
            endpoint_options: None,
            client_id: None,
            component_name: None,
            load_factor: None,
            concurrency: None,
            enabled: None,
            context: None,
            client_authentication_id: None,
            server_authentication_id: None,
            last_error: None,
        }
    }
}


